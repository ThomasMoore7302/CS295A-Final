module Dijkstra where

open import Basics002

{- ****THE CODE***


G is the input graph, s is the source vertex, `(uv) is the length of an edge from u to v, and V is the set of
vertices.

Dijkstra(G, s)
  for all u ∈ V \ {s}, d(u) = ∞
  d(s) = 0
  R = {}
  while R ≠ V
    pick u ∉ R with smallest d(u)
    R = R ∪ {u}
    for all vertices v adjacent to u
      if d(v) > d(u) + `(u, v)
        d(v) = d(u) + `(u, v)
-}

postulate
  -- implement later
  _≡?ᵛ_ : ∀ {n : ℕ} → vec[ n ] 𝔹 → vec[ n ] 𝔹 → ≡!
  _≡?ⁱ_ : ∀ {n : ℕ} → idx n → idx n → ≡!
  _<?ᴮ_ : ℕ → ℕ → 𝔹
  -- never implemented
  ∞ : ℕ


-- picking the smallest weight to descide on where to move next and how weights should be changed.
pick-smallest : ∀ {n} → idx n → vec[ n ] ℕ → vec[ n ] 𝔹 → idx n
pick-smallest {n} s d R =
  let state₀ : idx n
      state₀ = s
      s-final₁ = vlfold d state₀ s-final-body
      -- if i has been seen before, do nothing
      -- if i has not been seen, and BOTH d(stateᵢ) < d(i) AND we have not seen stateᵢ before, then do nothing
      s-final = vlfold d state₀ λ i d[i] stateᵢ →
        CASE R #[ i ] ⩔ ((d #[ stateᵢ ] <?ᴮ d[i]) ⩓ R #[ stateᵢ ]) OF λ where
          I → stateᵢ
          O → i
  in s-final
    where
      s-final-body : idx n → ℕ → idx n → idx n
      s-final-body i d[i] stateᵢ with R #[ i ] ⩔ ((d #[ stateᵢ ] <?ᴮ d[i]) ⩓ R #[ stateᵢ ])
      … | I = stateᵢ
      … | O = i

dijkstra-inner-loop : ∀ {n : ℕ} → graph[ n ] → idx n → idx n → vec[ n ] ℕ → vec[ n ] ℕ
dijkstra-inner-loop g u v d with g #[ u ] #[ v ]
dijkstra-inner-loop g u v [] | O = []
dijkstra-inner-loop g u v (x ∷ d) | O = x ∷ d -- not adjacent
… | I = d  -- is adjacent

--                                                                               
--                                       input        input        output       outrut
--                          whole graph  distances    seen set     distances    seen set
--                          ⌄⌄⌄⌄⌄⌄⌄⌄⌄⌄   ⌄⌄⌄⌄⌄⌄⌄⌄⌄⌄   ⌄⌄⌄⌄⌄⌄⌄⌄⌄⌄⌄  ⌄⌄⌄⌄⌄⌄⌄⌄⌄⌄   ⌄⌄⌄⌄⌄⌄⌄⌄⌄⌄⌄
dijkstra-loop : ∀ {n : ℕ} → graph[ n ] → vec[ n ] ℕ → vec[ n ] 𝔹 → vec[ n ] ℕ ∧ vec[ n ] 𝔹
dijkstra-loop g d R with R ≡?ᵛ const[vec]< _ > I
… | [≡] = ⟨ d , R ⟩ -- done
… | [≢] = ⟨ d , R ⟩ -- not done

-- this is what Dikjstra above in pseudocode corresponds to
dijkstra-vertex : ∀ {n : ℕ} → graph[ n ] → idx n → vec[ n ] ℕ
dijkstra-vertex {n} g s =
  -- initial output distances
  let d₀ : vec[ n ] ℕ
      d₀ = (const[vec]< n > ∞) #[ s ↦ 0 ]
      -- d′ : vec[ n ] ℕ
      -- R′ : vec[ n ] 𝔹
      ⟨ d′ , R′ ⟩ = dijkstra-loop g d₀ (const[vec]< n > O)
  in d′

dijkstra : ∀ {n : ℕ} → graph[ n ] → matrix[ n , n ] ℕ
dijkstra [] = []
dijkstra (x ∷ g) = dijkstra-vertex (x ∷ g) Z ∷ {!dijkstra-vertex (x ∷ g)  !} 



 

{- ***THE PROOF***



Let d(v) be the label found by the algorithm and let δ(v) be the shortest path distance from s-to-v. We
want to show that d(v) = δ(v) for every vertex v at the end of the algorithm, showing that the algorithm
correctly computes the distances. We prove this by induction on |R| via the following lemma:

                    ****Lemma: For each x ∈ R, d(x) = δ(x).*****


Proof by Induction: Base case (|R| = 1): Since R only grows in size, the only time |R| = 1 is when R = {s} and d(s) = 0 = δ(s), which is correct.


Inductive hypothesis: Let u be the last vertex added to R. Let R0 = R∪ {u}. Our I.H. is: for each x ∈ R′, d(x) = δ(x).


Using the I.H.: By the inductive hypothesis, for every vertex in R′ that isn’t u, we have the correct distance label. We need only show that d(u) = δ(u) to complete the proof.


Suppose for a contradiction that the shortest path from s-to-u is Q and has length
                                  
                                 𝓁(Q) < d(u).


Q starts in R′ and at some leaves R′ (to get to u which is not in R′). Let xy be the first edge along Q that leaves R′. Let Qx be the s-to-x subpath of Q. Clearly:

                              𝓁(Qx) + 𝓁(xy) ≤ 𝓁(Q).


Since d(x) is the length of the shortest s-to-x path by the I.H., d(x) ≤ `(Qx), giving us

                              d(x) + `(xy) ≤ `(Qx).


Since y is adjacent to x, d(y) must have been updated by the algorithm, so

                               d(y) ≤ d(x) + `(xy).


Finally, since u was picked by the algorithm, u must have the smallest distance label:

                                     d(u) ≤ d(y).

Combining these inequalities in reverse order gives us the contradiction that d(x) < d(x). Therefore, no suCh shorter path Q must exist and so d(u) = δ(u).


This lemma shows the algorithm is correct by “applying” the lemma for R = V .
-}


---
-- notes from 11-22-19

_ :
  let xs = 10 ∷ 11 ∷ 12 ∷ []
      ys = 20 ∷ 21 ∷ 22 ∷ []
  in vlfold xs ⟨ O , 100 ⟩ (λ where i x ⟨ b , n ⟩ → ⟨ not b , n + x + ys #[ i ] ⟩)
  ≡
  ⟨ I , 196 ⟩
_ = ↯

-- do something for all indices N
-- e.g., for each index, look up a value at that index and compute the
-- sum
-- let xs = [10,11,12]
-- n = 0
-- for i ∈ indices(xs):
--   n = n + xs[i] 
_ :
  let xs : vec[ 3 ] ℕ
      xs = 10 ∷ 11 ∷ 12 ∷ []
      is : vec[ 3 ] 𝟙
      -- is = • ∷ • ∷ • ∷ []
      is = const[vec]< 3 > •
  in vlfold is 0 (λ i _ n → n + xs #[ i ]) ≡ 33
_ = ↯

-- EXAMPLE OF NESTED CASE STATEMENT (like with, but can be nested)
  -- vlfold (const[vec]< n > •) state₀ λ u _ stateᵢ {- <- loop-intermediate state -} →
  --   CASE (s ≡?ⁱ u) OF λ where
  --     [≡] → stateᵢ
  --     -- you have some u ≠ s, run dijkstra-loop on u
  --     [≢] → {!dikjstra-loop g u stateᵢ!}